whaat is an RTOS?


Most operating systems appear to allow multiple programs to 
execute at the same time. This is called multi-tasking. 
In reality, each processor core can only be running a single 
thread of execution at any given point in time. 

A part of the operating system called the scheduler is 
responsible for deciding which program to run when, and 
provides the illusion of simultaneous execution by rapidly 
switching between each program.

The type of an operating system is defined by how the scheduler
decides which program to run when. For example, the scheduler 
used in a multi user operating system (such as Unix) will ensure
each user gets a fair amount of the processing time. As another
example, the scheduler in a desk top operating system 
(such as Windows) will try and ensure the computer remains 
responsive to its user. 

[Note: FreeRTOS is not a big operating system, nor is it designed
 to run on a desktop computer class processor, I use these 
examples purely because they are systems readers will be familiar with]

The scheduler in a Real Time Operating System (RTOS) is designed
to provide a predictable (normally described as deterministic) 
execution pattern. 

This is particularly of interest to embedded systems as embedded 
systems often have real time requirements. A real time requirements
is one that specifies that the embedded system must respond to a 
certain event within a strictly defined time (the deadline). 

A guarantee to meet real time requirements can only be made if 
the behaviour of the operating system's scheduler can be predicted 
(and is therefore deterministic).

Traditional real time schedulers, such as the scheduler used in 
FreeRTOS, achieve determinism by allowing the user to assign a 
priority to each thread of execution. The scheduler then uses 
the priority to know which thread of execution to run next. 

In FreeRTOS, a thread of execution is called a task. 



