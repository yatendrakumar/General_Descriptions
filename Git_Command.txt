Tell Git who you are -
git init
git config --global user.name "yatendra"
git config --global user.email yatendra.kr.sharma@gmail.com

# Add remote origin address
# No need to add again and again If already added once
git remote add origin https://github.com/yatendrakumar/General_Descriptions.git

# Clone it into your local system (Local Copy)
git clone -b master https://github.com/yatendrakumar/General_Descriptions.git

# To create or move to other branch
git checkout -b new_branch_name

# To check the current version/Commit number of your cloned source (In linux)
cat .git/refs/heads/branch_name

# Check existing branchs with checked current branches
git branch

# After doing some changes check the status (Add/remove files/folders)
git status

# Add evrything 
# if not able to add use "git add 'filename'"
git add *

# Commit your source with some commiting messages
git commit -am "Commiting message"

# push it into the git repo
git push origin branch_name

# Git Aliases
	$ git config --global alias.co checkout
	$ git config --global alias.unstage 'reset HEAD --'
	$ git config --global alias.last 'log -1 HEAD'
		$ git last

# Important commands
git am /tmp/0001-sensors-remove-PMD.patch
git am --abort
git format-patch -3
git show 45e489ab3a9b18605e8c0af66aeb2434b7db20fb
git blame filename (to see changes in files with commit id)
git log --format=full
git --git-dir=$sensor/.git/ --work-tree=$sensor/ diff
git --git-dir=$sensor/.git/ --work-tree=$sensor/ diff --stat
git rebase --continue

# Tagging:
	* Listing Your Tags
		$ git tag
			v0.1
			v1.3
		* you can also search for tags with a particular pattern.
		$ git tag -l "v1.8.5*"
			v1.8.5
			v1.8.5-rc0
			v1.8.5-rc1
			v1.8.5-rc2
	* Creating Tags 
		Git uses two main types of tags: lightweight and annotated.
		* Annotated Tags
		$ git tag -a v1.4 -m "my version 1.4" (The -m specifies a tagging message, which is stored with the tag)
		$ git tag
			v0.1
			v1.3
			v1.4
		* Lightweight Tags
		This is basically the commit checksum stored in a file – no other information is kept. 
		To create a lightweight tag, don’t supply the -a, -s, or -m option
		$ git tag v1.4-lw
		$ git tag
			v0.1
			v1.3
			v1.4
			v1.4-lw
			v1.5
	* Showing Tags
		#You can see the tag data along with the commit that was tagged by using the git show command:
		$ git show v1.4
	* Tagging Later
		You can also tag commits after you’ve moved past them. Suppose your commit history looks like this:
			$ git log --pretty=oneline
			15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
			a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
			0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
			9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
		Now, suppose you forgot to tag the project at v1.2, which was at the “updated rakefile” commit. 
		You can add it after the fact. To tag that commit, you specify the commit checksum (or part of it) at the end of the command:
			$ git tag -a v1.2 9fceb02d0ae598e95dc970b74767f19372d61af8
	* Sharing Tags
		* By default, the git push command doesn’t transfer tags to remote servers. 
		You will have to explicitly push tags to a shared server after you have created them. 
		This process is just like sharing remote branches – you can run git push origin [tagname].
			$ git push origin v1.5
		* If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command.
		This will transfer all of your tags to the remote server that are not already there.
			$ git push origin --tags
	* Checking out Tags
		* You can’t really check out a tag in Git, since they can’t be moved around. 
		If you want to put a version of your repository in your working directory that looks like a specific tag, 
		you can create a new branch at a specific tag with git checkout -b [branchname] [tagname]:
		$ git checkout -b version2 v2.0.0
		Of course if you do this and do a commit, your version2 branch will be slightly different than your v2.0.0 
		tag since it will move forward with your new changes, so do be careful.

Important Git command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	repo sync . --no-tags -c -q -j4
	ls -l /tmp/000*
	repo start b1 .
	git am /tmp/0001-sensors-remove-PMD.patch
	git am --abort
	git format-patch -3
	git show 45e489ab3a9b18605e8c0af66aeb2434b7db20fb
	git blame filename (to see changes in files with commit id)
	git log --format=full
	git --git-dir=$sensor/.git/ --work-tree=$sensor/ diff
	git --git-dir=$sensor/.git/ --work-tree=$sensor/ diff --stat
	git rebase --continue
	
	git reset --hard # removes staged and working directory changes

	git clean -f -d # remove untracked
	git clean -f -x -d # CAUTION: as above but removes ignored files like config.
	git clean -fxd :/ # CAUTION: as above, but cleans untracked and ignored files through the entire repo (without :/, the operation affects only the current directory)
